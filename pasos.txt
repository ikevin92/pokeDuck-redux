https://bluuweb.github.io/react-udemy/10-redux/#instaciones

-. creacion proyecto
-. instalacion dependencias
npm i redux react-redux redux-devtools redux-thunk axios

-. identificamos las api: https://pokeapi.co/api/v2/pokemon?offset=0&limit=20

-. eliminacion de archivos limpiar proyecto.

-. en el App.js se deja lo basico

-----REDUX CONFIG ----
-.  configuracion carpetas de redux (pokeDucks (puede ser poke o spoty ) y store)


https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup


-. Configuracion del ducks (constantes(initialState) types  reducers actions)

ducks: https://github.com/erikras/ducks-modular-redux#the-proposal

-. DUCKS: primero type, luego el reducer y finalmente la funcion

-. configuracion store.js en redux (solo se configura 1 vez): tomar como ejemplo la de poke pero tener cuidado con los reducer

-. crear componente del Home o el de las rutas

-. ponemos el provider y le asignamos la store

-. con el getstate podemos acceder desde el Duck a los estados

------ FIREBASE

-. creacion del proyecto en firebase y habilitar la auth
-. config de firebase.js
-. ir a la configuracion del sdk para pegar en el archivo
-. se pasa el provider de redux al index

----- ROUTER
-. en app configuramos el router
-. creacion de la plantilla delos otros componentes
-. crear navbar y se le asocian los navlinks

----- LOGIN
-. crear boton de acceder en el componente login
-. crear duck para los usuarios.(type, reducers, actions) y se importa el reducer en el store.js
-. se crea en el duck la funcion cuando se va a acceder

-. creacion de la funcion de leer usuario en el duck
-. se llama leer usuario en el store

-. se incluyen en la vista del login 

-----CERRAR SESION---
-. se crea el actio que cierra la sesion
-. se ponen las condiciones en la navbar para los botones
-. configuracion de las rtuas en app.jsx


